// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../db/wg-mui.sqlite"
}

model User {
  id           String   @id @default(uuid())
  name         String   @unique
  passwordHash String
  isAdmin      Boolean  @default(false)
  email        String?  @unique
  locale       String?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  // Relation
  userLabelList UserLabel[]
  peerList      Peer[]
  lastSignIn    LastSignIn?
  passwordReset PasswordReset?
  linkOAuthList LinkOAuth[]
}

model LastSignIn {
  id        String   @id
  provider  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model LinkOAuth {
  id        String
  type      String
  sub       String
  enabled   Boolean  @default(false)
  onetimeId String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([id, type])
  @@unique([type, sub])
}

model PasswordReset {
  id        String   @id
  onetimeId String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Label {
  id            String      @id @default(uuid())
  name          String      @unique
  explanation   String
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  userLabelList UserLabel[]
}

model UserLabel {
  id        String   @id @default(uuid())
  userId    String
  labelId   String
  createdAt DateTime @default(now())

  // Relation
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([userId, labelId])
}

model WgConf {
  id                String   @id @default("main")
  confDirPath       String
  interfaceName     String
  address           String
  listenPort        Int
  privateKey        String
  publicKey         String
  postUp            String?
  postDown          String?
  endPoint          String
  dns               String?
  defaultAllowedIPs String?
  defaultKeepalive  Int      @default(25)
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
}

model Peer {
  ip         String   @id
  userId     String?
  privateKey String
  publicKey  String
  remarks    String?
  isDeleting Boolean  @default(false)
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  // Relation
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model KeyValue {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
